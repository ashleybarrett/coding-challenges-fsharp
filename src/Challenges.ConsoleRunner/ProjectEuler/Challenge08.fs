module ProjectEulerChallenge08

let solution =
    //https://projecteuler.net/problem=8

    let numberOfAdjacentNumbers = 13

    let numbers = [73167176531330624919225119674426574742355349194934I;
    96983520312774506326239578318016984801869478851843I;
    85861560789112949495459501737958331952853208805511I;
    12540698747158523863050715693290963295227443043557I;
    66896648950445244523161731856403098711121722383113I;
    62229893423380308135336276614282806444486645238749I;
    30358907296290491560440772390713810515859307960866I;
    70172427121883998797908792274921901699720888093776I;
    65727333001053367881220235421809751254540594752243I;
    52584907711670556013604839586446706324415722155397I;
    53697817977846174064955149290862569321978468622482I;
    83972241375657056057490261407972968652414535100474I;
    82166370484403199890008895243450658541227588666881I;
    16427171479924442928230863465674813919123162824586I;
    17866458359124566529476545682848912883142607690042I;
    24219022671055626321111109370544217506941658960408I;
    07198403850962455444362981230987879927244284909188I;
    84580156166097919133875499200524063689912560717606I;
    05886116467109405077541002256983155200055935729725I;
    71636269561882670428252483600823257530420752963450I]

    numbers
    |> Seq.collect(fun x ->
        x
        |> string
        |> Seq.map(string >> int >> bigint)
    )
    |> Seq.windowed numberOfAdjacentNumbers
    |> Seq.map(Seq.reduce(*))
    |> Seq.max





